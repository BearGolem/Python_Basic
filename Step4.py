#Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

script, work_hours, bet_amount, bonus_amount = argv

print('Поздравляем! Вам полагается {} шекелей'.format((int(work_hours)*int(bet_amount))+int(bonus_amount)))


#Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше
# предыдущего элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.

import random

more_lists = []
more_lists2 = []

for i in range(random.randint(10, 30)):
    more_lists.append(random.randint(0, 500))

for i in range(1, len(more_lists)):
    if more_lists[i] > more_lists[i-1]:
        more_lists2.append(more_lists[i])

print(more_lists)
print(more_lists2)


#Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.

print([i for i in range(20, 240) if i%20 == 0 or i%21 == 0])


#Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

more_lists = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

print([i for i in more_lists if more_lists.count(i) == 1 ])


#Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.

from functools import reduce

def my_func(a, b):
    return a * b

print(reduce(my_func, [i for i in range(100, 1001) if i%2 == 0]))


#Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание,
# что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.

from itertools import count
from itertools import cycle
import random

for i in count(1):
    if i > 10:
        break
    else:
        print('Шаг {}, случайное число {}'.format(i, random.randint(0, 100)))

с = 0
for el in cycle("ОХОГ"):
    if с > 10:
        break
    print(el)
    с += 1


#Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только
# первые n чисел, начиная с 1! и до n!.

def fact(n):
    yield [i for i in range(1,n+1)]

for el in fact(6):
    some_digits = 1
    for i in range(len(el)):
        some_digits = some_digits * el[i]
        print(some_digits)